enum CoffeeField {
  name
  elevation
}

type CoffeeView {
  fields: [CoffeeField]
}

type View {
  id: ID!
  name: String!
  description: String
  jsonString: String
}

type ViewConnection {
  pageInfo: PageInfo!
  edges: [ViewEdge]
}

enum ViewEntity {
  Coffee
}

type ViewEdge {
  node: View
  cursor: String!
}

input CreateViewInput {
  name: String!
  description: String
  jsonString: String
}

input UpdateViewInput {
  name: String
  description: String
  jsonString: String
}

extend type Query {
  listViews(cursor: String, limit: Int, query: [QueryInput]): ViewConnection
  getView(id: ID!): View
}

extend type Mutation {
  createView(input: CreateViewInput!): View
  updateView(id: ID!, input: UpdateViewInput!): View
  deleteView(id: ID!): Boolean
}
