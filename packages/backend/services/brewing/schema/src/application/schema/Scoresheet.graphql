type ScoreSheet @key(fields: "id") {
  id: ID!
  totalScore: Float
  fragranceAroma: ScoreFloat
  flavor: ScoreFloat
  aftertaste: ScoreFloat
  acidity: ScoreFloat
  body: ScoreFloat
  uniformity: ScoreFloat
  cleanCup: ScoreFloat
  balance: ScoreFloat
  sweetness: ScoreFloat
  overall: ScoreFloat
  taints: DefectScore
  defects: DefectScore
  createdAt: String!
  updatedAt: String!
  user: User
}

extend type User @key(fields: "id") {
  id: ID! @external
}

type DefectScore {
  numberOfCups: Int
  intensity: Float
}

scalar ScoreFloat

input CreateScoreSheetInput {
  userId: ID
  fragranceAroma: ScoreFloat
  flavor: ScoreFloat
  aftertaste: ScoreFloat
  acidity: ScoreFloat
  body: ScoreFloat
  uniformity: ScoreFloat
  cleanCup: ScoreFloat
  balance: ScoreFloat
  sweetness: ScoreFloat
  overall: ScoreFloat
  taints: DefectScoreInput
  defects: DefectScoreInput
}

input UpdateScoreSheetInput {
  userId: ID
  fragranceAroma: ScoreFloat
  flavor: ScoreFloat
  aftertaste: ScoreFloat
  acidity: ScoreFloat
  body: ScoreFloat
  uniformity: ScoreFloat
  cleanCup: ScoreFloat
  balance: ScoreFloat
  sweetness: ScoreFloat
  overall: ScoreFloat
  taints: DefectScoreInput
  defects: DefectScoreInput
}

input DefectScoreInput {
  numberOfCups: Int
  intensity: Float
}

extend type Query {
  listScoreSheets(sessionCoffeeId: ID!): [ScoreSheet]
  getScoreSheet(sessionCoffeeId: ID!, scoreSheetId: ID!): ScoreSheet
}

extend type Mutation {
  createScoreSheet(sessionCoffeeId: ID!, input: CreateScoreSheetInput!): ScoreSheet
  updateScoreSheet(scoreSheetId: ID!, sessionCoffeeId: ID!, input: UpdateScoreSheetInput!): ScoreSheet
  deleteScoreSheet(id: ID!): CuppingSession
}
