type Farm {
  id: ID!
  name: String!
  country: Country
  region: Region
  farmZones: [FarmZone!]!
  createdAt: String!
  updatedAt: String!
}

type FarmZone {
  id: ID!
  name: String!
}

type FarmConnection {
  pageInfo: PageInfo!
  edges: [FarmEdge!]!
}

type FarmEdge {
  cursor: String!
  node: Farm!
}

input CreateFarmInput {
  name: String
  country: String
  region: String
}

input UpdateFarmInput {
  name: String
  country: String
  region: String
}

input CreateFarmZoneInput {
  name: String!
}

input UpdateFarmZoneInput {
  name: String!
}

extend type Query {
  listFarms(cursor: String, limit: Int, query: [QueryInput!]): FarmConnection!
  getFarm(id: ID!): Farm
}

extend type Mutation {
  createFarm(input: CreateFarmInput!): Farm
  updateFarm(id: ID!, input: UpdateFarmInput!): Farm
  deleteFarm(id: ID!): Farm
  createFarmZone(farmId: ID!, input: CreateFarmZoneInput): Farm
  updateFarmZone(id: ID!, input: UpdateFarmZoneInput): Farm
  deleteFarmZone(id: ID!): Farm
}
